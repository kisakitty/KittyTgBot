using KittyBot.services;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace KittyBot.handlers.commands;

public class ReverseChatBotCommand: Command
{
    private readonly IServiceScopeFactory _scopeFactory;
    
    public ReverseChatBotCommand(IServiceScopeFactory scopeFactory)
    {
        _scopeFactory = scopeFactory;
    }
    
    protected override async Task HandleCommand(ITelegramBotClient client, Message message, CancellationToken cancelToken)
    {
        if (message.From == null) return;
        var chatId = message.Chat.Id;

        if (chatId > 0)
        {
            await client.SendMessage(
                chatId: chatId,
                text: "–í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞",
                cancellationToken: cancelToken);
            return;
        }
        var chatAdministrators = await client.GetChatAdministrators(message.Chat.Id, cancelToken);
        if (chatAdministrators.All(admin => admin.User.Id != message.From.Id)) 
        {
            await client.SendMessage(
                chatId: chatId,
                text: "–¢—ã –Ω–µ –∞–¥–º–∏–Ω! –ü–æ–ø—Ä–æ—Å–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å —Å –ø–ª–∞—à–∫–æ–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É",
                cancellationToken: cancelToken);
            return;
        }
        var scope = _scopeFactory.CreateScope();
        var responseConfigService = scope.ServiceProvider.GetRequiredService<ResponseConfigService>();
        if (responseConfigService.ReverseChatBotStatus(chatId))
        {
            await client.SendMessage(
                chatId: chatId,
                text: "–Ø —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å! –ü–æ–∑–æ–≤–∏ –º–µ–Ω—è (–ø–æ –Ω–∏–∫–Ω–µ–π–º—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ \"–±–æ—Ç\") –∏ —è –ø—Ä–∏–¥—É!",
                cancellationToken: cancelToken);
        }
        else
        {
            await client.SendMessage(
                chatId: chatId,
                text: "–ó–∞—Ç–∫–Ω—É–ª—Å—è ü§ê",
                cancellationToken: cancelToken);
        }
    }
}